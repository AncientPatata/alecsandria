datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String               @id @default(cuid())
    username           String?
    email              String?              @unique
    emailVerified      DateTime?
    password           String
    image              String?
    userRoles          String[]             @default(["User"])
    userKarma          Int                  @default(0)
    accessKey          AccessKey            @relation(fields: [accessKeyId], references: [id])
    accounts           Account[]
    sessions           Session[]
    uploads            AssetDownload[]
    accessKeyId        String               @unique
    UserAssetDownloads UserAssetDownloads[]
    Comment            Comment[]
}

model Engine {
    id              String   @id @default(cuid())
    assetEngine     String   @unique
    engineAssetTags String[]
    Asset           Asset[]
}

model Asset {
    id                 String               @id @default(cuid())
    assetEngine        String
    engine             Engine               @relation(fields: [assetEngine], references: [assetEngine])
    assetName          String               @unique
    assetDescription   String
    assetTags          String[]
    assetPreviews      String[]
    assetDownloads     AssetDownload[]
    assetInteraction   PostInteraction      @relation(fields: [postInteractionId], references: [id])
    UserAssetDownloads UserAssetDownloads[]
    postInteractionId  String               @unique
    creationDate       DateTime             @default(now())
}

model PostInteraction {
    id       String    @id @default(cuid())
    karma    Int       @default(0)
    comments Comment[]
    Asset    Asset?
}

model Comment {
    id                String           @id @default(cuid())
    commenter         User             @relation(fields: [userId], references: [id])
    comment           String
    commentKarma      Int              @default(0)
    parentCommentId   String?
    creationDate      DateTime         @default(now())
    PostInteraction   PostInteraction? @relation(fields: [postInteractionId], references: [id])
    postInteractionId String?
    userId            String
}

model UserAssetDownloads {
    id           String   @id @default(cuid())
    user         User     @relation(fields: [userId], references: [id])
    asset        Asset    @relation(fields: [assetId], references: [id])
    downloadedAt DateTime @default(now())
    userId       String
    assetId      String
}

model AssetDownload {
    id                 String  @id @default(cuid())
    downloadOrigin     String
    assetEngineVersion String
    assetVersion       String
    downloadLink       String
    Asset              Asset?  @relation(fields: [assetId], references: [id])
    assetId            String?
    uploader           User    @relation(fields: [userId], references: [id])
    userId             String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model AccessKey {
    id        String    @id @default(cuid())
    keyValue  String    @unique
    expiresOn DateTime?
    User      User?
}
